{"version":3,"sources":["Components/form.component.jsx","Components/weather.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","props","className","onSubmit","loadWeather","error","type","name","autoComplete","placeholder","minmaxTemp","min","max","Weather","city","weatherIcon","temp_celsius","temp_min","temp_max","description","App","getWeather","e","a","preventDefault","country","target","elements","value","fetch","api_call","json","response","setState","sys","main","weather","celsius","calCelsius","temp","get_WeatherIcon","id","console","log","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","cell","Math","floor","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecf93e3f.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./form.style.css\"; \r\n\r\nconst Form = props => {\r\n    return(\r\n        <div className=\"container h-100\">\r\n        <form onSubmit={props.loadWeather}>\r\n        <div>{props.error ? error(): null}</div>\r\n        <div className=\"row\">\r\n            <div className=\"col-md-3 offset-md-2\">\r\n                <input type=\"text\" \r\n                className=\"form-control\" \r\n                name=\"city\" \r\n                autoComplete=\"off\" \r\n                placeholder='City' />\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                <input type=\"text\" \r\n                className=\"form-control\" \r\n                name=\"country\" \r\n                autoComplete=\"off\" \r\n                placeholder='Country' />\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n                <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction error() {\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\">\r\n            Please Enter City and Country\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form; ","import React from 'react';\r\nimport \"./weather.style.css\"; \r\n\r\nconst Weather = (props) => {\r\n    return(\r\n        <div className=\"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>\r\n\r\n                {/* ****show max and min temp */}\r\n               \r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`}>\r\n\r\n                    </i>\r\n                </h5>\r\n                {props.temp_celsius ?(<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n                ):null}\r\n                {minmaxTemp(props.temp_min,props.temp_max)}\r\n\r\n                <h4 className=\"py-3\">\r\n                    {props.description}\r\n                </h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nfunction minmaxTemp(min,max) {\r\n    if(min && max){\r\n    return(\r\n        <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n    );\r\n    }\r\n}\r\nexport default Weather; ","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./Components/form.component\";\nimport Weather from \"./Components/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// git project https://github.com/erikflowers/weather-icons\nimport \"weather-icons/css/weather-icons.css\";\n\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = temp - 273.15;\n    //change to Celsius\n    cell = Math.floor(cell * 1.8 + 32);\n    return cell;\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n\n    if (city && country) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n      );\n\n      const response = await api_call.json();\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      // seting icons\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n\n      console.log(response);\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadWeather={this.getWeather} error={this.state.error} />\n        <Weather\n          city={this.state.city}\n          weatherIcon={this.state.icon}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}